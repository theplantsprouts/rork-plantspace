rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Production-ready security rules
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidProfile() {
      return request.resource.data.keys().hasAll(['email', 'created_at', 'updated_at']) &&
             request.resource.data.email is string &&
             request.resource.data.created_at is string &&
             request.resource.data.updated_at is string;
    }
    
    function isValidPost() {
      return request.resource.data.keys().hasAll(['content', 'author_id', 'created_at', 'updated_at', 'likes', 'comments']) &&
             request.resource.data.content is string &&
             request.resource.data.author_id == request.auth.uid &&
             request.resource.data.likes is number &&
             request.resource.data.comments is number;
    }
    
    // User profiles
    match /profiles/{userId} {
      // Anyone can read profiles (for social features)
      allow read: if isAuthenticated();
      
      // Users can only create/update their own profile
      allow create: if isOwner(userId) && isValidProfile();
      allow update: if isOwner(userId) && isValidProfile();
      
      // Users can delete their own profile
      allow delete: if isOwner(userId);
    }
    
    // Posts
    match /posts/{postId} {
      // Anyone authenticated can read posts
      allow read: if isAuthenticated();
      
      // Users can create posts with proper validation
      allow create: if isAuthenticated() && isValidPost();
      
      // Users can only update/delete their own posts
      allow update, delete: if isAuthenticated() && 
                            resource.data.author_id == request.auth.uid;
    }
    
    // Push notification tokens
    match /push_tokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Comments on posts
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                    request.resource.data.author_id == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                            resource.data.author_id == request.auth.uid;
    }
    
    // Likes/reactions
    match /likes/{likeId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated() && 
                            request.resource.data.user_id == request.auth.uid;
    }
    
    // User notifications
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && 
                          resource.data.user_id == request.auth.uid;
      allow create: if isAuthenticated();
    }
    
    // Analytics events (write-only)
    match /analytics/{eventId} {
      allow create: if isAuthenticated();
    }
  }
}